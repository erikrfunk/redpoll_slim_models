// 2D model of space and phenotype
// Phenotype is controlled by inversion copy number
// Selection is varies continuously along the y-axis

initialize() {
  defineConstant("sigma_D", 0.05); // Dispersal
  defineConstant("alpha1", 0.8); // Strength of selection
  defineConstant("alpha2",0.8);
  defineConstant("N1", 1000); // Population 1 size
  defineConstant("N2",1000); // Population 2 size
  defineConstant("N3", 1000); // How many individuals total get inversion
  defineConstant("mig1", 0.001); // migration into population 1
  defineConstant("mig2", 0.001); //migration into population 2
  defineConstant("slope", 2.0); // z axis definition

  initializeSLiMOptions(dimensionality="xyz");
  initializeMutationRate(1e-7);
  initializeMutationType("m1", 0.5, "f", 0.0);
  initializeMutationType("m2", 0.5, "f", 1.0);  // m2 will be the inversion marker.
  m2.color = "red";
  m2.convertToSubstitution = F;
  initializeGenomicElementType("g1", m1, 1.0);
  initializeGenomicElement(g1, 0, 99999);
  initializeRecombinationRate(1e-6);

}

fitness(m2) { return 1.0; }

recombination() {
// creating the architechture of the inversion by suppressing recombination
  // is the parent homozygous? If so, recombination is unchanged
  if (genome1.containsMarkerMutation(m2,25000) ==
      genome2.containsMarkerMutation(m2,25000))
    return F;

  // are there any breakpoints occuring within the inversion?
  inInv = (breakpoints > 25000) & (breakpoints < 75000);
  // If not, recombination is unchanged
  if (!any(inInv))
    return F;

  // subset the variable breakpoints to remove proposed breakpoints in the inv
  breakpoints = breakpoints[!inInv];
  return T;
}

1 late() {
  sim.addSubpop("p1", N1);
  sim.addSubpop("p2", N2);
  p1.setMigrationRates(p2,mig1);
  p2.setMigrationRates(p1,mig2);
  p1.setSpatialBounds(c(0.0, 0.0, -slope, 2.0, 2.0, slope));
  p1.individuals.setSpatialPosition(p1.pointUniform(N1));
  p1.individuals.z = 0.0; // Phenotype storage
  p2.setSpatialBounds(c(0.0, 0.0, -slope, 2.0, 2.0, slope));
  p2.individuals.setSpatialPosition(p1.pointUniform(N2));
  p2.individuals.z = 0.0; // Phenotype storage

  // give the the inversion to individuals
  inverted = sample(p2.individuals, N3);
  inverted.genomes.addNewDrawnMutation(m2, 25000);
}

modifyChild() {
  // draw a child position near the first parent, within bounds
  do pos1 = c(parent1.spatialPosition[0:1] + rnorm(2, 0, sigma_D), 0.0);
  while (!p1.pointInBounds(pos1));
  child.setSpatialPosition(pos1);

  do pos2 = c(parent1.spatialPosition[0:1] + rnorm(2, 0, sigma_D), 0.0);
  while (!p1.pointInBounds(pos2));
  child.setSpatialPosition(pos2);

  return T;
}

1: late() {
  // Generate phenotype based on Inv copy number
  inds1 = p1.individuals;
  inds2 = p2.individuals;
  phenotypes1 = inds1.sumOfMutationsOfType(m2);
  phenotypes2 = inds2.sumOfMutationsOfType(m2);
  optima1 = (inds1.y);
  optima2 = (inds2.y);
  inds1.fitnessScaling = exp(-alpha1*(phenotypes1-optima1)^2);
  inds2.fitnessScaling = exp(-alpha2*(phenotypes2-optima2)^2);
  inds1.z = phenotypes1;
  inds2.z = phenotypes2;

	// Color individuals by phenotype
	inds = sim.subpopulations.individuals;
	for (ind in inds) {
	hue = ((ind.z + slope) / (slope * 2)) * 0.66;
	ind.color = rgb2color(hsv2rgb(c(hue, 1.0, 1.0)));
	}
}

1:10000 late() {
  if (sim.generation % 1000 != 0)
    return;
  // Assess the prevalence of the inversion in p1
  pScr = "sum(applyValue.genomes.containsMarkerMutation(m2, 25000));";
  p = sapply(sim.subpopulations.individuals, pScr);
  p__ = sum(p == 0);
  pI_ = sum(p == 1);
  pII = sum(p == 2);
  cat("\n##Generation " + format("%4d", sim.generation) + ": " + "\n");
  cat("#Count\n");
  cat(format("%3d", p__) + " AA   ");
  cat(format("%3d", pI_) + " AB   ");
  cat(format("%3d", pII) + " BB\n");

  // Sample 100 individuals and output ind.z and ind.y
  sampledInds = sample(sim.subpopulations.individuals, 100);
  cat("#Lat" + "\n");
  cat(sampledInds.y, "\t");
  cat("\n#Karyo" + "\n");
  cat(sampledInds.z, "\t");

}
